#!/bin/bash

# shellcheck shell=bash

# =========================================================================
#
# kubecli - extended control over Kubernetes
#
# Copyright 2022, Ildar Shaimordanov
# MIT License
#
# =========================================================================

# +++
# # NAME
#
# `kubecli` - extended control over Kubernetes
#
# # SYNOPSIS
#
#     kubecli ...
#     kubectl ...
#
# # DESCRIPTION
#
# The `kubecli` project implements the extended management on Kubernetes.
#
# ## Requirements
#
# * kubectl
# * bash
# * grep
# * awk
# * sed
#
# ## Installation
#
# Download the `.kubecli` file from this repository and put it in the home directory. After that source it in `.bashrc` or in shell scripts where you'd like to add its functionality.
#
#     . ~/.kubecli
#
# ---

# =========================================================================

# +++
# ## `kubectl`
#
# It's wrapper function around the `kubectl` executable itself and possibly other launchers like `minikube kubectl`, `k3s kubectl` and `rancher kubectl`.
#
# Other forms have been taken into account also because they are mentioned in the official documentations of each distribution.
#
# ---

if command -v kubectl >/dev/null
then
	kubectl() {
		__kubecli_run_native command kubectl "$@"
	}
elif command -v minikube >/dev/null
then
	kubectl() {
		__kubecli_run_native minikube kubectl -- "$@"
	}
elif command -v k3s >/dev/null
then
	kubectl() {
		__kubecli_run_native k3s kubectl "$@"
	}
elif command -v rancher >/dev/null
then
	kubectl() {
		__kubecli_run_native rancher kubectl "$@"
	}
fi

# =========================================================================

# +++
# ## `kubecli`
#
# It's the real workhorse. It does everything what `kubectl` is able to do and also does a bit more. The following section describes extended commands supported by `kubecli`.
#
# A command is passed as the first argument. If the argument is recognized as the `kubecli` extended command, it is processed internally. Otherwise everything is passed to `kubectl`.
#
# ---

kubecli() {
	case "$1" in
	'' )
		echo "\
To learn more about this tool
  kubecli help

To learn more about the kubectl usage
  kubecli --help
"
		;;
	help | man | env | names | labels | tail | grep )
		kubecli-"$@"
		;;
	* )
		kubectl ${KUBECLI_NS:+-n "$KUBECLI_NS"} "$@"
		;;
	esac
}

# =========================================================================

# +++
# # COMMANDS
#
# ## `help`
#
# Print the `kubecli` short usage:
#
#     kubecli help
#
# ---

kubecli-help() {
	echo "\
kubecli implements extended control over Kubernetes.

Print the kubecli short usage:
  kubecli help

Print the kubecli manual:
  kubecli man

Print Kubernetes related environment variables:
  kubecli env

List the entity names only: any of namespaces, pods, etc:
  kubecli names NAME ...
  kubectl get NAME -o name ...

Collect the entities and them reorder against the labels they associated:
  kubecli labels NAME ...
  kubectl get NAME \\
    --no-headers \\
    -o custom-columns=NAMES:.metadata.name,LABELS:.metadata.labels

Display logs for selected entities:
  kubecli tail SELECTOR ...
  kubectl logs SELECTOR ...

Print log lines matching GREP-OPTIONS:
  kubecli grep SELECTOR ... -- GREP-OPTIONS
  kubecli tail SELECTOR ... | grep GREP-OPTIONS
  kubectl logs SELECTOR ... | grep GREP-OPTIONS

Execute arbitrary kubectl command:
  kubecli ...
  kubectl ...

Environment variables. If set, have impact as follows:
  KUBECLI_NS   kubectl -n \"\$KUBECLI_NS\" ...
  KUBECLI_SEL  kubectl -l \"\$KUBECLI_SEL\" ...
  KUBECLI_SUDO sudo ... kubectl ...
  KUBECLI_GREP kubecli grep ...

Follow the next link to learn more about usage:
  https://github.com/ildar-shaimordanov/kubecli
"
}

# =========================================================================

# +++
# ## `man`
#
# Print the `kubecli` manual:
#
#     kubecli man
#
# ---

kubecli-man() {
	sed -n '/^# [+][+][+]$/,/^# [-][-][-]$/ {
		/^# [+][+][+]$/d
		/^# [-][-][-]$/d
		s/^# \?//p
	}' < "$BASH_SOURCE"
}

# =========================================================================

# +++
# ## `env`
#
# Print Kubernetes related environment variables:
#
#     kubecli env
#
# Kubernetes itself uses some environment variables which names look like `KUBE*`. This project adds a few variables named as `KUBECLI_*`. See the details in the corresponding section below.
#
# ---

kubecli-env() {
	set | grep '^KUBE[^=]*'
}

# =========================================================================

# +++
# ## `names`
#
# List the entity names only: any of namespaces, pods, etc:
#
#     kubecli names NAME ...
#     kubectl get NAME ... -o name
#
# Two examples above show two options how to achieve the same result with the new function and in the classical way.
#
# ---

# Pass the arguments exactly in this order to prevent on overwriting our
# mandatory options by end users when they try to pass something another.
kubecli-names() {
	kubecli get "$@" -o name
}

# =========================================================================

# +++
# ## `labels`
#
# Collect the entities and reorder them against the labels they associated:
#
#     kubecli labels NAME ...
#     kubectl get NAME ... \
#         --no-headers \
#         -o custom-columns=NAMES:.metadata.name,LABELS:.metadata.labels
#
# This command can be useful to recognize labels for selectors when needs come to define the pods for logging.
#
# Besides that this command reorders the collected list putting the labels in the front of the associated list of pods and other entities.
#
# ---

# Pass the arguments exactly in this order to prevent on overwriting our
# mandatory options by end users when they try to pass something another.
kubecli-labels() {
	kubecli get "$@" \
	--no-headers \
	-o custom-columns=NAMES:.metadata.name,LABELS:.metadata.labels \
	| awk '
	{
		# normalize labels: remove unused texts, convert to the
		# usable form as "name=value"
		sub(/map\[/, "")
		sub(/\]/, "")
		gsub(/:/, "=")

		# collect pod names into the associative array with the
		# label names as keys of the array
		for (n = 2; n <= NF; n++) {
			s[$n] && s[$n] = s[$n] ","
			s[$n] = s[$n] $1
		}
	}

	END {
		# find a length of the longest label
		width = 0

		for (p in s) {
			len = length(p)
			len > width && width = len
		}

		# prepare the formatting string
		format = "%-" width "s  %s\n"

		# final work: output the labels and associated pods
		for (p in s) {
			printf format, p, s[p]
		}
	}
	'
}

# =========================================================================

# +++
# ## `tail`
#
# Display logs for selected entities:
#
#     kubecli tail SELECTOR ...
#     kubectl logs SELECTOR ...
#
# It's definitely something very useful: keep a namespace and pod selectors in environment variables and call a command like this to monitor pods' log messages.
#
# ---

kubecli-tail() {
	kubecli logs ${KUBECLI_SEL:+-l "$KUBECLI_SEL"} "$@"
}

# =========================================================================

# +++
# ## `grep`
#
# Print log lines matching GREP-OPTIONS:
#
#     kubecli grep SELECTOR ... -- GREP-OPTIONS
#     kubecli tail SELECTOR ... | grep GREP-OPTIONS
#     kubectl logs SELECTOR ... | grep GREP-OPTIONS
#
# It's syntactic sugar combining `kubecli tail` and `grep`. More frequently we need to filter some particular lines in logs. For more complex cases use `kubecli tail` with alternative grep-like tools or specify the `KUBECLI_GREP` variable.
#
# **Note**: the `--` parameter in the first command is mandatory because it separates arguments for `kubectl` and `grep`, respectively.
#
# ---

kubecli-grep() {
	local n
	n="$( __kubecli_minus_minus_argument_position "$@" )"
	kubecli-tail "${@:1:n-1}" \
	| eval "${KUBECLI_GREP:-grep} $(
		__kubecli_reparse_arguments "${@:n+1}"
	)"
}

# =========================================================================

# Reparse arguments for using with eval.

__kubecli_reparse_arguments() {
	for n in "$@" ; do printf " '%s'" "${n//\'/\'\\\'\'}" ; done
}

# Construct the command line and run the native kubectl instance. Before
# running the final command, it checks correctness of sudo-ing and fix
# the arguments list removing the first argument if it equals exactly
# to the value "command", which is the shell builtin command.

__kubecli_run_native() {
	if [ -n "$KUBECLI_SUDO" ]
	then
		case "$KUBECLI_SUDO" in
		sudo | 'sudo '* )
			# Everything is fine - do nothing.
			;;
		* )
			echo "KUBECLI_SUDO is not set correctly">&2
			return 1
			;;
		esac

		if [ "$1" = "command" ]
		then
			shift
		fi
	fi

	eval "$KUBECLI_SUDO $(
		__kubecli_reparse_arguments "$@"
	)"
}

# Detect and print the position of the first "--" occurrence.

__kubecli_minus_minus_argument_position() {
	local n=1

	while [ $# -gt 0 ] && [ "$1" != "--" ] || break
	do
		(( n+=1 ))
		shift
	done

	echo "$n"
}

# =========================================================================

# +++
# # ENVIRONMENT
#
# These variables are used by `kubecli`. If one of them is declared and is not empty, it is used according to the explanations below.
#
# ## `KUBECLI_GREP`
#
# Enables an alternative command for filtering log lines. If not specified, `grep` is used.
#
# ## `KUBECLI_NS`
#
# Declares a namespace for invocation as `kubectl -n "$KUBECLI_NS"`.
#
# ## `KUBECLI_SEL`
#
# Declares a selector for invocation as `kubectl logs -l "$KUBECLI_SEL"`.
#
# ## `KUBECLI_SUDO`
#
# Declares the `sudo` command and its parameters used to elevate privileges for kubectl. It can be useful when the command is executed under regular users. No needs to declare it for root.
#
# At least one of the following examples is applicable for you:
#
#     KUBECLI_SUDO=sudo
#     KUBECLI_SUDO='sudo -i'
#     KUBECLI_SUDO='sudo -E'
#     KUBECLI_SUDO='sudo KUBECONFIG=/etc/kubernetes/admin.conf'
#
# # ASSOCIATIONS AND CULTURAL REFERENCES
#
# Initially, when I started developing this project, one allusion has stuck in my mind - "Kin-dza-dza!", the famous movie and masterpiece by the Soviet producer Georgy Danelia. It is funny sci-fi, a bit humoristic, a bit satirical.
#
# Events take place partially on our Earth and mostly on Plyuk, the alien planet. The Plyukanian language has the word koo /ku/ meaning any other word. It sounds like the first sillable of the kubectl word. And nothing more.
#
# Later I realized that kubecli is good name for the project because it is CLI tool for kube (the short form of kubectl). In the other hand, kubecli /kubekli/ sounds almost like күбәләк /kʏbæ'læk/, the Tatar word meaning butterfly.
#
# When development was becoming closer to finish and was almost ready for publishing I re-read some facts about "Kin-dza-dza!". Another Plyukanian word pepelats (a spaceship) is originated from the Georgian word პეპელა /'pepela/ that is translated as butterfly.
#
# So, the circle has closed! Koo!
#
# # REFERENCES
#
# Kubectl commands
#
# * https://kubernetes.io/docs/reference/kubectl/kubectl/
# * https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands
#
# kubectl Cheat Sheet
#
# * https://kubernetes.io/docs/reference/kubectl/cheatsheet/
#
# Custom columns
#
# * https://kubernetes.io/docs/reference/kubectl/#custom-columns
#
# JSONPath Support
#
# * https://kubernetes.io/docs/reference/kubectl/jsonpath/
#
# # SEE ALSO
#
# Here is collection of links to other projects similar to this one or implementing more interesting features.
#
# * https://github.com/deniskrumko/kube-cli/
#
# # LICENSE
#
# Copyright 2022, Ildar Shaimordanov
#
#     MIT License
# ---

# =========================================================================

# EOF
