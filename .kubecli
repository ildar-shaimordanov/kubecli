#!/bin/sh

# shellcheck shell=sh

# =========================================================================
#
# kubecli - extended control over Kubernetes
#
# Copyright 2022, Ildar Shaimordanov
# MIT License
#
# =========================================================================

# +++
#
# # NAME
#
# `kubecli` - extended control over Kubernetes
#
# # SYNOPSIS
#
#     kubecli [OPTIONS]
#     kubectl [OPTIONS]
#
# # DESCRIPTION
#
# The `kubecli` project implements the extended management on Kubernetes.
#
# ## Requirements
#
# * kubectl
# * sh
# * grep
# * awk
#
# ## Installation
#
# Download the `.kubecli` file from this repository and put it in the
# home directory. After that source it in `.bashrc` or in shell scripts
# where you'd like to add its functionality.
#
#     . ~/.kubecli
#
# ---

# =========================================================================

# +++
#
# ## `kubectl`
#
# It's wrapper function around the `kubectl` executable itself and
# possibly other launchers like `minikube kubectl`, `k3s kubectl` and
# `rancher kubectl`.
#
# Other forms have been taken into account also because they are mentioned
# in the official documentations of each distribution.
#
# ---

if command -v kubectl >/dev/null
then
	kubectl() {
		__kubecli_run_kubectl command kubectl "$@"
	}
elif command -v minikube >/dev/null
then
	kubectl() {
		__kubecli_run_kubectl minikube kubectl -- "$@"
	}
elif command -v k3s >/dev/null
then
	kubectl() {
		__kubecli_run_kubectl k3s kubectl "$@"
	}
elif command -v rancher >/dev/null
then
	kubectl() {
		__kubecli_run_kubectl rancher kubectl "$@"
	}
fi

# Construct the command line and run the native kubectl instance. Before
# running the final command, it checks correctness of sudo-ing and fix
# the arguments list removing the first argument if it equals exactly
# to the value "command", which is the shell builtin command.

__kubecli_run_kubectl() {
	case "$KUBECLI_SUDO" in
	'' )
		# No sudo - nothing to do.
		;;
	sudo | 'sudo '* )
		if [ "$1" = "command" ]
		then
			shift
		fi
		;;
	* )
		echo "KUBECLI_SUDO is not set correctly">&2
		return 1
		;;
	esac

	eval "$KUBECLI_SUDO $(
		__kubecli_reparse_arguments "$@"
	)"
}

# =========================================================================

# +++
#
# ## `kubecli`
#
# It's the real workhorse. It does everything what `kubectl` is able to
# do and also does a bit more. The following section describes extended
# commands supported by `kubecli`.
#
# A command is passed as the first argument. If the argument is recognized
# as the `kubecli` extended command, it is processed internally. Otherwise
# everything is passed to `kubectl`.
#
# ---

kubecli() {
	case "$1" in
	'' )
		echo "\
To learn more about this tool
    kubecli help

To learn more about the kubectl usage
    kubecli --help
"
		;;
	help | names | labels | tail | grep | ctx )
		# pass array as array slimilar to kubecli_$1 "${@:2}"
		# shellcheck disable=SC2145
		kubecli_"$@"
		;;
	* )
		kubectl ${KUBECLI_NS:+-n "$KUBECLI_NS"} "$@"
		;;
	esac
}

# =========================================================================

# +++
#
# # COMMANDS
#
# ## `help`
#
# Print the `kubecli` short usage.
#
#     kubecli help
#
# ---

kubecli_help() {
	echo "\
kubecli implements extended control over Kubernetes.

Print the kubecli short usage.
    kubecli help

List the entity names only: any of namespaces, pods, etc.
    kubecli names NAME [OPTIONS]
    kubectl get NAME -o name [OPTIONS]

Collect the entities and reorder them against the labels they associated.
    kubecli labels NAME [OPTIONS]
    kubectl get NAME [OPTIONS] \\
      --no-headers \\
      -o custom-columns=NAMES:.metadata.name,LABELS:.metadata.labels

Display logs for selected entities.
    kubecli tail [SELECTOR] [OPTIONS]
    kubectl logs SELECTOR [OPTIONS]

Print log lines matching GREP-OPTIONS.
    kubecli grep [SELECTOR] [OPTIONS] -- GREP-OPTIONS
    kubecli tail [SELECTOR] [OPTIONS] | grep GREP-OPTIONS
    kubectl logs SELECTOR [OPTIONS] | grep GREP-OPTIONS

Display, use or modify the context.
    kubecli ctx [-a|-|.|NAME] [OPTIONS]

Execute arbitrary kubectl command.
    kubecli [OPTIONS]
    kubectl [OPTIONS]

Environment variables. If set, have impact as follows.
    KUBECLI_NS    kubectl -n \"\$KUBECLI_NS\" [OPTIONS]
    KUBECLI_SEL   kubectl -l \"\$KUBECLI_SEL\" [OPTIONS]
    KUBECLI_SUDO  sudo [SUDO_OPTIONS] kubectl [OPTIONS]
    KUBECLI_GREP  kubecli grep [OPTIONS]

Follow the next link to learn more about usage.
    https://github.com/ildar-shaimordanov/kubecli
"
}

# =========================================================================

# +++
#
# ## `names`
#
# List the entity names only: any of namespaces, pods, etc.
#
#     kubecli names NAME [OPTIONS]
#     kubectl get NAME [OPTIONS] -o name
#
# Two examples above show two options how to achieve the same result
# with the new function and in the classical way.
#
# ---

# Pass the arguments exactly in this order to prevent on overwriting our
# mandatory options by end users when they try to pass something another.

kubecli_names() {
	kubectl get "$@" -o name
}

# =========================================================================

# +++
#
# ## `labels`
#
# Collect the entities and reorder them against the labels they
# associated.
#
#     kubecli labels NAME [OPTIONS]
#     kubectl get NAME [OPTIONS] \
#         --no-headers \
#         -o custom-columns=NAMES:.metadata.name,LABELS:.metadata.labels
#
# This command can be useful to recognize labels for selectors when
# needs come to define the pods for logging.
#
# Besides that this command reorders the collected list putting the
# labels in the front of the associated list of pods and other entities.
#
# ---

# Pass the arguments exactly in this order to prevent on overwriting our
# mandatory options by end users when they try to pass something another.

kubecli_labels() {
	kubectl get "$@" \
	--no-headers \
	-o custom-columns=NAMES:.metadata.name,LABELS:.metadata.labels \
	| awk '
	{
		# normalize labels: remove unused texts, convert to the
		# usable form as "name=value"
		sub(/map\[/, "")
		sub(/\]/, "")
		gsub(/:/, "=")

		# collect pod names into the associative array with the
		# label names as keys of the array
		for (n = 2; n <= NF; n++) {
			if ( s[$n] ) s[$n] = s[$n] ","
			s[$n] = s[$n] $1
		}
	}

	END {
		# find a length of the longest label
		width = 0

		for (p in s) {
			len = length(p)
			if ( len > width ) width = len
		}

		# prepare the formatting string
		format = "%-" width "s  %s\n"

		# final work: output the labels and associated pods
		for (p in s) printf format, p, s[p]
	}
	'
}

# =========================================================================

# +++
#
# ## `tail`
#
# Display logs for selected entities.
#
#     kubecli tail [SELECTOR] [OPTIONS]
#     kubectl logs SELECTOR [OPTIONS]
#
# It's definitely something useful: keep a namespace and pod selectors
# in `KUBECLI_NS` and `KUBECLI_SEL`, the environment variables and call
# this command to monitor pods' log messages.
#
# ---

kubecli_tail() {
	kubectl logs ${KUBECLI_SEL:+-l "$KUBECLI_SEL"} "$@"
}

# =========================================================================

# +++
#
# ## `grep`
#
# Print log lines matching GREP-OPTIONS.
#
#     kubecli grep [SELECTOR] [OPTIONS] -- GREP-OPTIONS
#     kubecli tail [SELECTOR] [OPTIONS] | grep GREP-OPTIONS
#     kubectl logs SELECTOR [OPTIONS] | grep GREP-OPTIONS
#
# Take logs of pods specified by the selector and filter particular
# lines. If the `KUBECLI_SEL` variable is set and not empty, it is
# used implicitly.
#
# It's syntactic sugar combining `kubecli tail` and `grep`. For more
# complex cases use `kubecli tail` with alternative grep-like tools or
# specify the `KUBECLI_GREP` variable.
#
# **Note**: the `--` parameter in the first command is mandatory because
# it separates arguments for `kubectl` and `grep`, respectively.
#
# **Note**: this command is fully supported in BASH only.
#
# ---

# shellcheck disable=SC3043,SC3057
kubecli_grep() {
	[ -n "$BASH" ] || {
		echo "Not supported. Instead use \"kubecli tail | grep\"." >&2
		return 1
	}

	local n
	n="$( __kubecli_minus_minus_argument_position "$@" )"
	kubecli_tail "${@:1:n-1}" \
	| eval "${KUBECLI_GREP:-grep} $(
		__kubecli_reparse_arguments "${@:n+1}"
	)"
}

# =========================================================================

# +++
#
# ## `ctx`
#
# Display, use or modify the context.
#
# Display all contexts.
#
#     kubecli ctx -a [OPTIONS]
#     kubectl config get-contexts [OPTIONS]
#
# Display the current context.
#
#     kubecli ctx [.]
#     kubectl config current-context
#
# Use the context.
#
#    kubecli ctx NAME
#    kubectl config use-context NAME
#
# Use the previous context (similar to `cd -` in shells).
#
#     kubecli ctx -
#     kubectl config use-context "$KUBECLI_OLDCTX"
#
# Modify the context.
#
#     kubecli ctx .|NAME OPTIONS
#     kubectl config set-context --current OPTIONS
#     kubectl config set-context NAME OPTIONS
#
# ---

kubecli_ctx() {
	if [ "$1" = "-a" ]
	then
		shift
		kubectl config get-contexts "$@"
	elif [ $# -eq 0 ] || { [ $# -eq 1 ] && [ "$1" = "." ] ; }
	then
		kubectl config current-context
	elif [ $# -eq 1 ] && [ "$1" = "-" ]
	then
		kubecli_ctx "${KUBECLI_OLDCTX:?value not set}"
	elif [ $# -eq 1 ]
	then
		KUBECLI_OLDCTX="$( kubecli_ctx . )"
		kubectl config use-context "$1"
	else
		if [ "$1" = "." ]
		then
			shift
			set -- "--current" "$@"
		fi

		kubectl config set-context "$@"
	fi
}

# =========================================================================

# Reparse arguments for using with eval.

__kubecli_reparse_arguments() {
	[ $# -gt 0 ] || return 0

	printf '%s\n' "$@" \
	| awk -v apos="'" -v bsol="\\\\" -v ORS=" " \
	'{ gsub(apos, apos bsol apos apos); print apos $0 apos }'
}

# Detect and print the position of the first "--" occurrence.

__kubecli_minus_minus_argument_position() {
	n=1

	while [ $# -gt 0 ] && [ "$1" != "--" ] || break
	do
		n=$(( n+1 ))
		shift
	done

	echo "$n"
}

# =========================================================================

# +++
#
# # ENVIRONMENT
#
# These variables are used by `kubecli` and `kubectl`. If one of them
# is declared and is not empty, it is used according to the explanations
# below.
#
# ## `KUBECLI_GREP`
#
# Enables an alternative command for filtering log lines. If not
# specified, `grep` is used.
#
# ## `KUBECLI_NS`
#
# Declares a namespace for invocation as `kubectl -n "$KUBECLI_NS"`.
#
# ## `KUBECLI_SEL`
#
# Declares a selector for invocation as `kubectl logs -l "$KUBECLI_SEL"`.
#
# ## `KUBECLI_SUDO`
#
# If required, declares the `sudo` command and optionally its parameters
# used to elevate privileges for `kubectl`. It can be useful when
# the command is executed under regular users. No needs to declare it
# for root.
#
# At least one of the following examples is applicable for you (just
# specify the right path to the configuration file):
#
#     KUBECLI_SUDO=sudo
#     KUBECLI_SUDO='sudo -i'
#     KUBECLI_SUDO='sudo -E'
#     KUBECLI_SUDO='sudo -E bash -l'
#     KUBECLI_SUDO='sudo --preserve-env=KUBECONFIG'
#     KUBECLI_SUDO='sudo KUBECONFIG=/etc/kubernetes/admin.conf'
#
# ## `KUBECLI_OLDCTX`
#
# It stores the previously working context.
#
# # ASSOCIATIONS AND CULTURAL REFERENCES
#
# Initially, when I started developing this project, one allusion has
# stuck in my mind - "Kin-dza-dza!", the famous movie and masterpiece
# by the Soviet producer Georgy Danelia. It is funny sci-fi, a bit
# humoristic, a bit satirical.
#
# Events take place partially on our Earth and mostly on Plyuk, the
# alien planet. The Plyukanian language has the word koo /ku/ meaning any
# other word. It sounds like the first sillable of the kubectl word. And
# nothing more.
#
# Later I realized that kubecli is good name for the project because it
# is CLI tool for kube (the short form of kubectl). In the other hand,
# kubecli /kubekli/ sounds almost like күбәләк /kʏbæ'læk/,
# the Tatar word meaning butterfly.
#
# When development became closer to finish and was almost ready for
# publishing I re-read some facts about "Kin-dza-dza!". Pepelats, another
# Plyukanian word meaning a spaceship is originated from the Georgian
# word პეპელა /'pepela/ that is translated as butterfly.
#
# So, the circle has closed! Koo!
#
# # REFERENCES
#
# Kubectl commands
#
# * https://kubernetes.io/docs/reference/kubectl/kubectl/
# * https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands
#
# kubectl Cheat Sheet
#
# * https://kubernetes.io/docs/reference/kubectl/cheatsheet/
#
# Custom columns
#
# * https://kubernetes.io/docs/reference/kubectl/#custom-columns
#
# JSONPath Support
#
# * https://kubernetes.io/docs/reference/kubectl/jsonpath/
#
# # SEE ALSO
#
# Here is collection of links to other projects similar to this one or
# implementing more interesting features.
#
# * https://github.com/deniskrumko/kube-cli
# * https://github.com/ahmetb/kubectx
# * https://github.com/collabnix/kubetools
#
# # LICENSE
#
# Copyright 2022, Ildar Shaimordanov
#
#     MIT License
#
# ---

# =========================================================================

# EOF
